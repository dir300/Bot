import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
)

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò (–≤—Å–µ –≤ .env) ===
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "@your_manager_bot" –∏–ª–∏ "https://t.me/username"

if not TOKEN or not ADMIN_ID:
    raise ValueError("TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env!")

# –î–ê–ù–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–µ–±—è)
VACANCY_TITLE = "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"
VACANCY_SALARY = "–æ—Ç 80 000 –¥–æ 150 000 ‚ÇΩ"
VACANCY_SCHEDULE = "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å, —Å 9:00 –¥–æ 18:00"
VACANCY_LOCATION = "–ú–æ—Å–∫–≤–∞, –º. –ö—É—Ä—Å–∫–∞—è (–≥–∏–±—Ä–∏–¥)"
VACANCY_REQUIREMENTS = (
    "‚Ä¢ –û–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –æ—Ç 1 –≥–æ–¥–∞\n"
    "‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
    "‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–¥–∞–∂–∞–º"
)
VACANCY_BENEFITS = (
    "‚Ä¢ –ë–µ–ª–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ + –±–æ–Ω—É—Å—ã\n"
    "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –∑–∞ —Å—á—ë—Ç –∫–æ–º–ø–∞–Ω–∏–∏\n"
    "‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
)
VACANCY_CONTACT = "üì© –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @your_support_bot –∏–ª–∏ +7 (XXX) XXX-XX-XX"

# FAQ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
FAQ = {
    "–∑–∞—Ä–ø–ª–∞—Ç–∞": f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {VACANCY_SALARY}. –í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü.",
    "–≥—Ä–∞—Ñ–∏–∫": f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {VACANCY_SCHEDULE}.",
    "–º–µ—Å—Ç–æ": f"–ú–µ—Å—Ç–æ: {VACANCY_LOCATION}.",
    "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è": f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{VACANCY_REQUIREMENTS}",
    "–ª—å–≥–æ—Ç—ã": f"–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n{VACANCY_BENEFITS}",
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
NAME, CONTACT, RESUME = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–ù–û–ü–ö–ê "–°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú" ===
def get_manager_button():
    if MANAGER_CHAT_ID:
        return [[InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=MANAGER_CHAT_ID)]]
    return []

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìå –û –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="vacancy")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton("üì§ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫", callback_data="apply")],
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    keyboard += get_manager_button()
    return InlineKeyboardMarkup(keyboard)

def get_back_to_start_button():
    buttons = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]
    buttons += get_manager_button()
    return InlineKeyboardMarkup(buttons)

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:\n\n*{VACANCY_TITLE}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

# –ü–æ–∫–∞–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
async def show_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        f"*{VACANCY_TITLE}*\n\n"
        f"üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {VACANCY_SALARY}\n"
        f"üìÖ *–ì—Ä–∞—Ñ–∏–∫:* {VACANCY_SCHEDULE}\n"
        f"üìç *–ú–µ—Å—Ç–æ:* {VACANCY_LOCATION}\n\n"
        f"‚úÖ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n{VACANCY_REQUIREMENTS}\n\n"
        f"üéÅ *–õ—å–≥–æ—Ç—ã –∏ –±–æ–Ω—É—Å—ã:*\n{VACANCY_BENEFITS}\n\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {VACANCY_CONTACT}"
    )
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=get_back_to_start_button(),
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=get_back_to_start_button(),
            parse_mode="Markdown"
        )

# –ü–æ–∫–∞–∑ FAQ
async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", callback_data="faq_salary")],
        [InlineKeyboardButton("üìÖ –ì—Ä–∞—Ñ–∏–∫", callback_data="faq_schedule")],
        [InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ", callback_data="faq_location")],
        [InlineKeyboardButton("‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", callback_data="faq_requirements")],
        [InlineKeyboardButton("üéÅ –õ—å–≥–æ—Ç—ã", callback_data="faq_benefits")],
    ]
    keyboard += get_manager_button()
    keyboard += [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ
async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.replace("faq_", "")

    mapping = {
        "salary": "–∑–∞—Ä–ø–ª–∞—Ç–∞",
        "schedule": "–≥—Ä–∞—Ñ–∏–∫",
        "location": "–º–µ—Å—Ç–æ",
        "requirements": "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
        "benefits": "–ª—å–≥–æ—Ç—ã"
    }
    key = mapping.get(data)
    answer = FAQ.get(key, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq")]]
    keyboard += get_manager_button()
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(answer, reply_markup=reply_markup)

# –ù–∞—á–∞–ª–æ –æ—Ç–∫–ª–∏–∫–∞
async def start_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ø–æ–ª–Ω–æ–µ –∏–º—è*:",
        parse_mode="Markdown",
        reply_markup=get_back_to_start_button()
    )
    return NAME

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (Telegram, WhatsApp –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):",
        reply_markup=get_back_to_start_button()
    )
    return CONTACT

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    await update.message.reply_text(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (—Ñ–∞–π–ª PDF –∏–ª–∏ DOC):",
        reply_markup=get_back_to_start_button()
    )
    return RESUME

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
async def get_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    name = context.user_data["name"]
    contact = context.user_data["contact"]

    if update.message.document:
        file = update.message.document
        file_id = file.file_id
        file_name = file.file_name
    elif update.message.text and not update.message.text.startswith("/"):
        file_id = None
        file_name = "(—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞)"
    else:
        file_id = None
        file_name = "(–Ω–µ—Ç —Ñ–∞–π–ª–∞)"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    message_to_admin = (
        f"üì¨ *–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é*\n\n"
        f"üë§ *–ò–º—è:* {name}\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {contact}\n"
        f"üìé *–§–∞–π–ª:* {file_name}\n"
        f"üÜî *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {user.id}\n"
        f"üåê *Username:* @{user.username or '–Ω–µ—Ç'}"
    )

    try:
        if file_id:
            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=file_id,
                caption=message_to_admin,
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=message_to_admin,
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫."
        )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!* –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∑–∞–¥–∞–≤–∞–π—Ç–µ!",
        parse_mode="Markdown",
        reply_markup=get_main_menu()
    )
    return ConversationHandler.END

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===
def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–∫–ª–∏–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_apply, pattern="apply")],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
            RESUME: [
                MessageHandler(
                    filters.Document.ALL | (filters.TEXT & ~filters.COMMAND),
                    get_resume
                )
            ],
        },
        fallbacks=[CallbackQueryHandler(back_to_start, pattern="start")],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_vacancy, pattern="vacancy"))
    application.add_handler(CallbackQueryHandler(show_faq, pattern="faq"))
    application.add_handler(CallbackQueryHandler(handle_faq, pattern="^faq_"))
    application.add_handler(CallbackQueryHandler(back_to_start, pattern="start"))
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫
    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == "__main__":
    main()